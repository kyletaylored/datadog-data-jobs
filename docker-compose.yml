services:
  # FastAPI Web Application
  webapp:
    build: .
    container_name: datadog-data-jobs-web
    command: sh -c "ddtrace-run uvicorn app.main:app --host 0.0.0.0 --port 8000"
    volumes:
      - .:/app
      - ./data:/app/data
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    environment:
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgresql}
      DATABASE_NAME: ${DATABASE_NAME:-datadog}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-datadog}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-datadog}
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DD_SERVICE: ${DD_SERVICE:-datadog-demo}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DD_DBM_PROPAGATION_MODE: full
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "datadog-data-jobs-web"}]'

  # PostgreSQL Database
  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-datadog}
      POSTGRES_USER: ${DATABASE_USERNAME:-datadog}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-datadog}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-datadog}"]
      interval: 5s
      timeout: 5s
      retries: 5
    labels:
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service": "postgres"}]'
      com.datadoghq.ad.checks: '{"postgres": { "init_config": {}, "instances": [{"dbm": true}]}}'
    env_file:
      - .env

  # RabbitMQ for Celery
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      DD_DATA_STREAMS_ENABLED: "true"
    labels:
      com.datadoghq.ad.checks: '{"rabbitmq": {"instances": [{"url": "%%host%%:15672", "username": "guest", "password": "guest"}]}, "logs": [{"source": "rabbitmq", "service": "rabbitmq"}]}'

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./logs/spark:/opt/bitnami/spark/logs
    labels:
      com.datadoghq.ad.logs: >-
        [{
          "type": "file",
          "path": "/opt/bitnami/spark/logs/spark-master.out",
          "source": "spark",
          "service": "spark-master"
        }]

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - ./logs/spark:/opt/bitnami/spark/logs
    labels:
      com.datadoghq.ad.logs: >-
        [{
          "type": "file",
          "path": "/opt/bitnami/spark/logs/spark-worker.out",
          "source": "spark",
          "service": "spark-worker"
        }]

  # Celery Worker
  celery-worker:
    build: .
    command: ddtrace-run celery -A app.worker.celery_app worker --loglevel=info
    volumes:
      - .:/app
      - ./data:/app/data
    depends_on:
      - rabbitmq
      - db
      - init
    environment:
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgresql}
      DATABASE_NAME: ${DATABASE_NAME:-datadog}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-datadog}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-datadog}
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DD_SERVICE: ${DD_SERVICE:-datadog-demo-worker}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    env_file:
      - .env
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "celery-worker"}]'

  # Prefect Server and UI
  prefect-server:
    image: prefecthq/prefect:3-latest
    command: prefect server start
    ports:
      - "4200:4200"
    environment:
      - PREFECT_ORION_DATABASE_CONNECTION_URL=${PREFECT_ORION_DATABASE_CONNECTION_URL:-postgresql+asyncpg://datadog:datadog@db:5432/datadog}
      - PREFECT_SERVER_API_HOST=0.0.0.0
      - PREFECT_UI_API_URL=http://localhost:4200/api # Used by the browser UI
    depends_on:
      db:
        condition: service_healthy
    user: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/api/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    env_file:
      - .env
    volumes:
      - prefect_data:/root/.prefect
      - ./logs/prefect:/root/.prefect/logs
    labels:
      com.datadoghq.ad.logs: '[{"type": "file", "path": "/root/.prefect/logs/prefect.log", "source": "prefect", "service": "prefect-server"}]'

  # Prefect Worker (replacing the old agent)
  prefect-worker:
    build: .
    command: bash -c "prefect config set PREFECT_API_URL=http://prefect-server:4200/api && prefect worker start -p default"
    volumes:
      - .:/app
      - ./data:/app/data
      - prefect_data:/root/.prefect
    depends_on:
      - prefect-server
      - db
      - spark-master
      - init
    environment:
      DATABASE_ENGINE: ${DATABASE_ENGINE:-postgresql}
      DATABASE_NAME: ${DATABASE_NAME:-datadog}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-datadog}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-datadog}
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      DD_SERVICE: ${DD_SERVICE:-datadog-demo-prefect}
      PREFECT_API_URL: http://prefect-server:4200/api
      # Force using localhost DNS as a backup
      PREFECT_CLIENT_SERVER_HOST: prefect-server
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    user: root
    env_file:
      - .env
    labels:
      com.datadoghq.ad.logs: '[{"source": "prefect", "service": "prefect-worker"}]'

  # Combined initialization service
  init:
    build: .
    command: /app/init/run.sh
    volumes:
      - .:/app
      - ./data:/app/data
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      prefect-server:
        condition: service_started
    user: root
    environment:
      DATABASE_NAME: ${DATABASE_NAME:-datadog}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-datadog}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-datadog}
      DATABASE_HOST: ${DATABASE_HOST:-db}
      DATABASE_PORT: ${DATABASE_PORT:-5432}
      PREFECT_API_URL: http://prefect-server:4200/api
      DD_SERVICE: ${DD_SERVICE:-datadog-demo-init}
    env_file:
      - .env
  # dbt-core
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.latest
    container_name: dbt-core
    volumes:
      - ./dbt_project:/usr/app
    working_dir: /usr/app
    depends_on:
      - db
    environment:
      DBT_PROFILES_DIR: /usr/app
    labels:
      com.datadoghq.ad.logs: >-
        [{
          "type": "file",
          "path": "/usr/app/target/dbt.log",
          "source": "dbt",
          "service": "dbt"
        }]

  # Datadog Agent (optional - only runs if DD_API_KEY is set)
  datadog-agent:
    image: gcr.io/datadoghq/agent:7
    container_name: datadog-agent
    pid: "host"
    ports:
      - 5002:5002
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /etc/os-release:/host/etc/os-release:ro
    environment:
      - DD_API_KEY=${DD_API_KEY:-}
      - DD_ENV=${DD_ENV:-demo}
      - DD_SITE=${DD_SITE:-datadoghq.com}
      - DD_LOGS_ENABLED=true
      - DD_APM_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_HOSTNAME=${HOSTNAME:-datadog-data-jobs}
      - DD_HOSTNAME_TRUST_UTS_NAMESPACE=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_GUI_PORT=5002
    privileged: true
    healthcheck:
      test: ["CMD", "agent", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    # Only start the agent if an API key is provided
    profiles:
      - with-datadog

volumes:
  postgres_data:
  rabbitmq_data:
  prefect_data:
